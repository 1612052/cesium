availability?  giant string of bits (only care about the runs of 0's, fill in rough parts with empty tiles to reduce need for a ton of ranges down in the leaves
root transform.
asset
gerror for root and gerrors are derived from that (knowing that its quad oct bin)
quadtree: give me tile at level z node x,y
tileset.json abailbiilty  points a requet that

tileset of tilesets, i.e. external tilesets (fetching json vs b3dm) cmpt wrapper? no extesions, just magic checks.
mix implicit and custom(tileset.json as it is today)

Custom binary can be unwieldy to deal with. strike a balance of size vs usability

actual terrain layer.json is huge 10+ MB they split it up now so that level 0 has it and level 10 tiles have it (to cover 20 levels in 2 fetch stages)

[x] Use roadhouse to generate a few levels using shehzan's instructions
Here are the steps:
• Use branch: https://github.com/AnalyticalGraphicsInc/agi-swayze/tree/fix-implicit-tiling-output
• Download data at: https://drive.google.com/open?id=1Zqbmm-5mAakwkXmyYG7-JAHaGJck0Uct
• To create a tileset, say at level 13 do:
./bin/roadHouse.js -I Database --disable-geometry-compression -i ~/data/NYC-12-CE-G-0.sqlite3 --tiler TMSGeodetic -x 8 -o ~/data/implicitRoadhouse/NYC-13 --content-level 13
• You can repeat this for as many levels as you want. Then combine all the directories and you'll get a replacement refinement tree (edited)
Maybe do 9-13
Can almost ignore the json use the root min max height as min max height for everything
Probably need the terrain way of calculating the sse (should i just find alaska.terraindb and use terrain to 3dtiles converter)
Don't need boundingVolume since region is implicit (height is not, at least for quadtree)
[x] Replace/add hint b3dm hint in properties hints
[x] Remove extensions
[x] Find an example layers.json
Content bounding volume can be had from the glb
if "root"exists then its traditional if "tilingScheme" exists then it's implicit
  * type: quad, oct, tms, wtms, cdb, xyz
  * transform
  * height min/max (implies long lat subdivision) OR boundingBox (implies subdivision within that bounding box)
  * availability: layers.json, double single head implied from this
  * geometric error of root, others derived from this (see calculation in terrain to 3dtiles converter)
  * content boundingbox is in the glb's minmax of positions so actual geom error could be the diag of this box?
  [ ] Should provide a hint to amount of heads it is based on, though you could figure it out give the boundingRegion and first availability
layer.json has an available field that is a 2d array of ranges the first array holds arrays for each level

[ ] Make a new tileset traversal class to handle implicit tiling
 * Just build a tree from the tile availablity and the root tile bound then traverse as normal
 * What does terrain do? does it just build a tree from the layer.json?
 * FILES OF NOTE:
        Scene/Globe.js // has members like terrainProvider, imageryLayerCollection, maxsse, quadtreeprim, ellipsoid
                        // has functions for ray intersection
        Scene/QuadtreePrimitive.js // This is like 3dtileset AND traversal
        Scene/QuadtreeTile.js // This is sort of like 3dtile
        Scene/GlobeSurfaceTileProvider.js // This is sort of like traversal but makes requests, renders and get dist. Its quadtree is QuadtreePrimitive
        Core/EllipsoidTerrainProvider.js
        Core/CesiumTerrainProvider.js
        Core/GeographicTilingScheme.js // NOTE: Has a bunch of rect convertsions (pos, xy, etc)
        Core/TilingScheme.js // The interface of *TilingScheme.js files
        Core/TerrainProvider.js // The interface of *TerrainProvider.js files
 * Will probably be heavily inspired by CesiumTerrainProvider.js
 * Each level has a fixed gError
 * if lat long based maybe don't provide a geom error (just assume its the same as global terrain and do sse that same way with that same function (see terrain to 3dtiles converter))
 * camera height off ellisoid probably tells you min level
 * and then some progressive ring distances away tell you level switches
 * those ring distaces would be like traveling back up, in fact you could precalc these elevation min z changes for a given maxSSE
 * and the delta between the elevation min z changes tell you the progressive ring distances.
 * I want a function that given a camera, culling volume, and tileset, get a list of z,x,y coords I need to request
 * consult availability to trim this list then assign priorities

 * so that the z/x/y is only reserved for tiles could have an externalAvailibility.json that tells you ranges of
 * layer.jsons in that are named z/x/ylayer.json that tell you the availablity for that tile and below
 * TODO: how to make this not insane in terms of hitt level 10 and then suddelny needing to request a bunch of jsons?
 * i.e. how to stagger?

NYC-all root and first child
rsc: (1.952908968275784e-10, -3189342.379591365, 0)
rsr: 9553783.977822298
robc: (1.952908968275784e-10, -3189342.379591365, 0)
robha: (6378684.75918273, 0, 1.952908968275784e-10)
        (3.905817936551568e-10, 0, -3189342.379591365)
        (0, 6357300.073427909, 0)
rge: 563.8721715009725
c0sc: (1.952908968275784e-10, -3189342.379591365, 0)
c0sr: 9553783.977822298
c0obc: (1.952908968275784e-10, -3189342.379591365, 0)
c0obha: (6378684.75918273, 0, 1.952908968275784e-10)
        (3.905817936551568e-10, 0, -3189342.379591365)
        (0, 6357300.073427909, 0)
c0ge: 563.8721715009725
ERROR NYC-9: c0c0 center is wrong sign on x and z
c0c0sc: (-2393046.300993696, -2393046.300993697, -3373586.191374643)
c0c0sr: 6568552.836985369
c0c0obc: (-2393046.300993696, -2393046.300993697, -3373586.191374643)
c0c0obha: (3189342.379591365, -2251425.3100569984, -794734.7099335275)
        (-3189342.3795913635, -2251425.3100569993, -794734.709933528)
        (0, 3183996.208152659, -1123924.6052766426)
c0c0ge: 281.93608575048626
c0c1sc: (2393046.3009936963, -2393046.3009936945, -3373586.1913746414)
c0c1sr: 6568552.836985373
c0c1obc: (2393046.3009936963, -2393046.3009936945, -3373586.1913746414)
ERROR NYC-9: wrong signs on some of the half axes (the y on x and y axes should be flipped, the z on z axis should be flipped)
c0c1obha: (3189342.379591368, 2251425.3100569984, 794734.7099335281)
        (3189342.379591363, -2251425.310057002, -794734.7099335296)
        (0, 3183996.2081526616, -1123924.6052766438)
c0c1ge: 281.93608575048626

NYC-9
rsc: (1.952908968275784e-10, -3189342.379591365, 0)
rsr: 9553783.977822298
robc: (1.952908968275784e-10, -3189342.379591365, 0)
robha: (6378684.75918273, 0, 1.952908968275784e-10)
        (3.905817936551568e-10, 0, -3189342.379591365)
        (0, 6357300.073427909, 0)
rge: 563.8721715009725
c0sc: (1.952908968275784e-10, -3189342.379591365, 0)
c0sr: 9553783.977822298
c0obc: (1.952908968275784e-10, -3189342.379591365, 0)
c0obha: (6378684.75918273, 0, 1.952908968275784e-10)
        (3.905817936551568e-10, 0, -3189342.379591365)
        (0, 6357300.073427909, 0)
c0ge: 563.8721715009725
c0c0sc: (2393046.3009936963, -2393046.3009936945, 3373586.1913746414)
c0c0sr: 6568552.836985373
c0c0obc: (2393046.3009936963, -2393046.3009936945, 3373586.1913746414)
c0c0obha: (3189342.379591368, -2251425.3100569984, 794734.7099335281)
        (3189342.379591363, 2251425.310057002, -794734.7099335296)
        (0, 3183996.2081526616, 1123924.6052766438)
c0c0ge: 563.8721715009725


NYC-10
rsc: (1336358.291381222, -4661634.6721119005, 4129423.4476662027)
rsr: 24576.389681959794
robc: (1336358.291381222, -4661634.6721119005, 4129423.4476662027)
robha: (14339.790959816113, -3502.6083558573473, 63.49360566699067)
        (4110.810883672715, 12218.190779972256, -221.48550695092757)
        (0, 14826.530478022294, 197.5206146184414)
rge: 563.8721715009725
c0sc: (1336358.291381222, -4661634.6721119005, 4129423.4476662027)
c0sr: 24576.389681959794
c0obc: (1336358.291381222, -4661634.6721119005, 4129423.4476662027)
c0obha: (14339.790959816113, -3502.6083558573473, 63.49360566699067)
        (4110.810883672715, 12218.190779972256, -221.48550695092757)
        (0, 14826.530478022294, 197.5206146184414)
c0ge: 563.8721715009725
c0c0sc: (1341742.4035102495, -4653457.2404353665, 4136809.764666716)
c0c0sr: 12276.16775388522
c0c0obc: (1341742.4035102495, -4653457.2404353665, 4136809.764666716)
c0c0obha: (7147.946102466746, -1763.4913081796785, 49.091001686635096)
        (2060.9843151343107, 6116.175038535142, -170.25837198052827)
        (0, 7402.120647027748, 152.37546284064567)
c0c0ge: 0
c0c1sc: (1327467.8224858104, -4657581.006738451, 4136835.927205513)
c0c1sr: 12277.445933688105
c0c1obc: (1327467.8224858104, -4657581.006738451, 4136835.927205513)
c0c1obha: (7154.33868972913, -1744.744117183397, 59.381563705856564)
        (2039.0744440172937, 6121.645228729378, -208.3473803145863)
        (0, 7402.22785253294, 186.29990970814418)
c0c1ge: 0

/////////////USEFUL CODE////////////////////////

    NOTE: TerrainProvider.js
    /**
     * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will
     * ensure that adjacent heightmap vertices are separated by no more than
     * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.
     * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the
     * screen pixels between adjacent heightmap vertices and thus rendering more quickly.
     * @type {Number}
     */
    TerrainProvider.heightmapTerrainQuality = 0.25;
    /**
     * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.
     *
     * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.
     * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.
     * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.
     * @returns {Number} An estimated geometric error.
     */
    TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function(ellipsoid, tileImageWidth, numberOfTilesAtLevelZero) {
        return ellipsoid.maximumRadius * 2 * Math.PI * TerrainProvider.heightmapTerrainQuality / (tileImageWidth * numberOfTilesAtLevelZero);
    };

    NOTE: CesiumTerrainProvider.js
    this._tilingScheme = new GeographicTilingScheme({
        numberOfLevelZeroTilesX : 2,
        numberOfLevelZeroTilesY : 1,
        ellipsoid : options.ellipsoid
    });
    this._heightmapWidth = 65;
    this._levelZeroMaximumGeometricError = TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap(this._tilingScheme.ellipsoid, this._heightmapWidth, this._tilingScheme.getNumberOfXTilesAtLevel(0));

/////////////USEFUL CODE////////////////////////
