unpack the compressed bit array into u8 array? i.e. 0x1 or 0x0 at each index?
Probably since the unpacking would be in an inner loop

make the branch then..
[] traversal should not be baked in pass state, tileset should have a few to pick from give the passenum
    or bake a traversal enum in place of the traversal class type that's baked in the passoptoins
    ex:

    passOptions[Cesium3DTilePass.RENDER] = freezeObject({
        traversal : TRAVERSAL_BASIC,
        isRender : true,
        requestTiles : true,
        ignoreCommands : false
    });

    passOptions[Cesium3DTilePass.MOST_DETAILED_PICK] = freezeObject({
        traversal : TRAVERSAL_MOST_DETAILED,
        isRender : false,
        requestTiles : false,
        ignoreCommands : false
    });

    then use this enum to pick from an array of traversals stored in the tileset

[ ] get the sandcastle to load the implicit clone
[ ] build the arrays on load as well ... and toroidial subtree viewer?
[ ] look at the sse calculation and see if theres a good way to pre-calc the sse spheres and sphere deltas
[ ] try to traverse the subtree arrays in tree style (is this a waste of time?)
    children are just subtree array indices and the subtree link?
    tiles store the link to their subtree and their subtree index?
[ ] incrementally move components to array style
[ ] try to go full bresenham
